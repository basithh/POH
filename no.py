# import base64
# import base64
# img_data = b'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'
# # imgdata = base64.b64decode(data)
# # filename = 'some_image.jpg'  # I assume you have a way of picking unique filenames
# # with open(filename, 'wb') as f:
# #         f.write(imgdata)
# # img_data = b'iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg=='

# import base64
# with open("img.png", "wb") as fh:
#     fh.write(base64.decodebytes(img_data))
# # image_64_decode = base64.b64decode("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") 
# # image_result = open('deer_decode.png', 'wb') # create a writable image and write the decoding result
# # image_result.write(image_64_decode)

from PIL import Image
from io import BytesIO
import base64

data = '''R0lGODlhDwAPAKECAAAAzMzM/////wAAACwAAAAADwAPAAACIISPeQHsrZ5ModrLl
N48CXF8m2iQ3YmmKqVlRtW4MLwWACH+H09wdGltaXplZCBieSBVbGVhZCBTbWFydFNhdmVyIQAAOw==''' 

im = Image.open(BytesIO(base64.b64decode(data)))